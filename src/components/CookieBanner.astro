---
// Cookie Consent Banner - RGPD Compliant
---

<div id="cookie-banner" class="fixed bottom-0 left-0 right-0 z-[200] bg-white border-t border-black/[0.08] shadow-2xl transform translate-y-full transition-transform duration-500" style="display: none;">
  <div class="container mx-auto px-4 py-6 sm:py-8">
    <div class="flex flex-col lg:flex-row items-start lg:items-center justify-between gap-4 lg:gap-8">
      <!-- Message -->
      <div class="flex-1">
        <h3 class="font-semibold text-lg text-[#1C1C1C] mb-2">
          üç™ Respect de votre vie priv√©e
        </h3>
        <p class="text-sm text-[#1C1C1C]/70 leading-relaxed">
          Nous utilisons des cookies pour am√©liorer votre exp√©rience (Google Maps, Google Fonts). 
          En cliquant sur "Accepter", vous consentez √† leur utilisation. 
          <a href="/politique-confidentialite" class="text-[#C2A983] hover:underline">En savoir plus</a>
        </p>
      </div>
      
      <!-- Actions -->
      <div class="flex flex-wrap gap-3 w-full lg:w-auto">
        <button 
          id="cookie-accept"
          class="flex-1 lg:flex-none px-6 py-3 bg-[#C2A983] text-white font-medium rounded-md hover:bg-[#0E2235] transition-colors shadow-sm"
        >
          Accepter tout
        </button>
        <button 
          id="cookie-reject"
          class="flex-1 lg:flex-none px-6 py-3 bg-gray-200 text-[#1C1C1C] font-medium rounded-md hover:bg-gray-300 transition-colors"
        >
          Refuser
        </button>
        <a 
          href="/cookies"
          class="flex-1 lg:flex-none px-6 py-3 bg-white border border-black/[0.08] text-[#1C1C1C] font-medium rounded-md hover:bg-gray-50 transition-colors text-center"
        >
          Personnaliser
        </a>
      </div>
    </div>
  </div>
</div>

<script is:inline>
  // Cookie consent management - FIXED VERSION
  (function() {
    console.log('üç™ Cookie banner script loaded');
    
    const COOKIE_CONSENT_KEY = 'hotel-cookie-consent';

    // Check if consent already given
    function getCookieConsent() {
      const consent = localStorage.getItem(COOKIE_CONSENT_KEY);
      if (consent) {
        try {
          return JSON.parse(consent);
        } catch {
          return null;
        }
      }
      return null;
    }

    // Save consent
    function saveCookieConsent(consent) {
      console.log('üíæ Saving consent:', consent);
      localStorage.setItem(COOKIE_CONSENT_KEY, JSON.stringify(consent));
      
      // Dispatch event for other components
      window.dispatchEvent(new CustomEvent('cookieConsentChanged', { detail: consent }));
    }

    // Show banner
    function showBanner() {
      console.log('üëÄ Showing cookie banner');
      const banner = document.getElementById('cookie-banner');
      if (banner) {
        banner.style.display = 'block';
        setTimeout(() => {
          banner.classList.remove('translate-y-full');
        }, 100);
      }
    }

    // Hide banner
    function hideBanner() {
      console.log('üôà Hiding cookie banner');
      const banner = document.getElementById('cookie-banner');
      if (banner) {
        banner.classList.add('translate-y-full');
        setTimeout(() => {
          banner.style.display = 'none';
        }, 500);
      }
    }

    // Accept all cookies
    function acceptAll() {
      const consent = {
        analytics: true,
        maps: true,
        fonts: true,
        timestamp: Date.now()
      };
      saveCookieConsent(consent);
      hideBanner();
    }

    // Reject all cookies (keep only essential)
    function rejectAll() {
      const consent = {
        analytics: false,
        maps: false,
        fonts: false,
        timestamp: Date.now()
      };
      saveCookieConsent(consent);
      hideBanner();
    }

    // Initialize - wait for DOM
    function init() {
      console.log('üöÄ Initializing cookie banner');
      const consent = getCookieConsent();
      console.log('üìù Current consent:', consent);
      
      // Show banner if no consent yet
      if (!consent) {
        console.log('‚ú® No consent found, showing banner');
        showBanner();
      } else {
        console.log('‚úÖ Consent already given, banner hidden');
      }
      
      // Attach event listeners
      const acceptBtn = document.getElementById('cookie-accept');
      const rejectBtn = document.getElementById('cookie-reject');
      
      if (acceptBtn) acceptBtn.addEventListener('click', acceptAll);
      if (rejectBtn) rejectBtn.addEventListener('click', rejectAll);
      
      console.log('üîó Event listeners attached');
    }

    // Run when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }

    // Export for use in other components
    window.getCookieConsent = getCookieConsent;
  })();
</script>
