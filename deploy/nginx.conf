# Nginx Configuration Snippet
# Security headers for hotel website deployment on Nginx servers
# Add these directives inside your server block

# Example server block:
# server {
#     listen 443 ssl http2;
#     server_name hotel-example.com www.hotel-example.com;
#     root /var/www/hotel-vitrine;
#     index index.html;
#
#     # SSL configuration
#     ssl_certificate /path/to/fullchain.pem;
#     ssl_certificate_key /path/to/privkey.pem;
#
#     # Include security headers below...
# }

# Force HTTPS redirect (place in port 80 server block)
# server {
#     listen 80;
#     server_name hotel-example.com www.hotel-example.com;
#     return 301 https://$server_name$request_uri;
# }

# Security Headers (place inside the main server block)
# HSTS - Force HTTPS for 2 years (including subdomains)
add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;

# Content Security Policy
# IMPORTANT: If you need to integrate a third-party booking engine:
# - Modify frame-src to include the booking system's domain
# - Example: frame-src 'self' https://booking.example.com https://www.google.com;
# - Modify script-src if the booking widget requires external scripts
add_header Content-Security-Policy "default-src 'self'; img-src 'self' data: https:; script-src 'self'; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; frame-src https://www.google.com; upgrade-insecure-requests;" always;

# Referrer Policy - Only send origin when cross-origin
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# Prevent MIME type sniffing
add_header X-Content-Type-Options "nosniff" always;

# Prevent clickjacking (allow same origin)
add_header X-Frame-Options "SAMEORIGIN" always;

# Permissions Policy - Disable unnecessary browser features
add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

# Hide Nginx version
server_tokens off;

# Cache Control for Static Assets
location ~* \.(jpg|jpeg|png|gif|webp|svg|ico)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    access_log off;
}

location ~* \.(css|js)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    access_log off;
}

location ~* \.(woff|woff2|ttf|otf|eot)$ {
    expires 1y;
    add_header Cache-Control "public, immutable";
    access_log off;
}

# HTML files - no cache
location ~* \.html$ {
    expires -1;
    add_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
}

# Gzip Compression
gzip on;
gzip_vary on;
gzip_min_length 1000;
gzip_comp_level 6;
gzip_types
    text/plain
    text/css
    text/xml
    text/javascript
    application/javascript
    application/json
    application/xml+rss
    application/rss+xml
    application/atom+xml
    image/svg+xml;

# Deny access to sensitive files
location ~ /\. {
    deny all;
    access_log off;
    log_not_found off;
}

location ~* \.(json|md)$ {
    deny all;
    access_log off;
    log_not_found off;
}

# Single Page Application routing (serve index.html for all routes)
location / {
    try_files $uri $uri/ /index.html;
}

# Custom error pages (optional - create these files if needed)
# error_page 404 /404.html;
# error_page 500 502 503 504 /500.html;

# Example full server block:
# server {
#     listen 443 ssl http2;
#     server_name hotel-example.com www.hotel-example.com;
#     root /var/www/hotel-vitrine;
#     index index.html;
#
#     # SSL certificates
#     ssl_certificate /etc/letsencrypt/live/hotel-example.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/hotel-example.com/privkey.pem;
#     ssl_protocols TLSv1.2 TLSv1.3;
#     ssl_ciphers HIGH:!aNULL:!MD5;
#
#     # Include all the security headers and cache rules above
#     # ...
# }
